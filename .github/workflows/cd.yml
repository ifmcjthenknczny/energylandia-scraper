name: cd

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

permissions:
  contents: read

env:
  NODE_VERSION: "22.11.0"
  BUILD_ID: ${{ github.run_number }}
  AWS_STACK_NAME: ${{ vars.AWS_STACK_NAME }}

jobs:
  setup-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          cache: 'yarn'

  build-LambdaScraper:
    name: Build LambdaScraper
    runs-on: ubuntu-latest
    needs: setup-node
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        working-directory: lambda-scraper
        run: yarn install --frozen-lockfile --arch=arm64

      - name: Build app
        working-directory: lambda-scraper
        run: yarn build

      - name: Move and clean build
        run: mv lambda-scraper/out/build LambdaScraper && rm LambdaScraper/start-local.js

      - name: Setup environment variables
        run: echo "AWS_STACK_NAME=$AWS_STACK_NAME\nMONGO_URI=$MONGO_URI" > LambdaScraper/.env
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}

      - name: Setup starter
        run: mv lambda-scraper/deployment/lambda-starter.js LambdaScraper/lambda-starter.js

      - name: Compress build
        run: tar -czf LambdaScraper.tar LambdaScraper

      - name: Save build
        uses: actions/upload-artifact@v4
        with:
          name: LambdaScraper.tar
          path: LambdaScraper.tar
          retention-days: 1

  build-NodeModules:
    name: Build NodeModules
    runs-on: ubuntu-latest
    needs: setup-node
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Install production deps
        working-directory: lambda-scraper
        run: yarn install --frozen-lockfile --arch=arm64 --production

      - name: Move build
        run: |
          mkdir -p NodeModules/nodejs
          mv lambda-scraper/node_modules NodeModules/nodejs/node_modules

      - name: Compress build
        run: tar -czf NodeModules.tar NodeModules

      - name: Save build
        uses: actions/upload-artifact@v4
        with:
          name: NodeModules.tar
          path: NodeModules.tar
          retention-days: 1

  deploy:
    name: Deploy
    needs: [build-LambdaScraper, build-NodeModules]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get AWS account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          path: deployer

      - name: Uncompress builds
        working-directory: deployer
        run: for build in *.tar; do tar -xf "$build/$build"; done

      - name: Install production deps
        working-directory: deployer
        run: yarn install --frozen-lockfile --production

      - name: CDK Bootstrap
        working-directory: deployer
        run: yarn cdk bootstrap

      - name: CDK Deploy
        working-directory: deployer
        run: yarn cdk deploy --require-approval never --tags project=${{ vars.AWS_PROJECT_TAG }}